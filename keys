#!/bin/bash

xdg_data_home=${XDG_DATA_HOME:-$HOME/.local/share}
vault="$xdg_data_home/keys/vault"

[ ! -d "$vault" ] && mkdir -p "$vault"

usage() {
    echo "usage: keys [COMMAND] [ARGS]"
    echo ""
    echo "commands:"
    echo "    add NAME"
    echo "        store a new key and name it NAME"
    echo ""
    echo "    update"
    echo "        change the username or password of a key"
    echo ""
    echo "    remove"
    echo "        lets you select a key to delete"
    echo ""
    echo "    rm"
    echo "        alias for remove"
}

gen_password() {
    while true; do
        secret=$(gpg --armor --gen-random 2 12)
        [ "$(echo "$secret" | tr -cd "[:lower:]" | wc -c)" -lt 1 ] && continue
        [ "$(echo "$secret" | tr -cd "[:upper:]" | wc -c)" -lt 1 ] && continue
        [ "$(echo "$secret" | tr -cd "[:digit:]" | wc -c)" -lt 1 ] && continue
        [ "$(echo "$secret" | tr -cd "[:punct:]" | wc -c)" -lt 1 ] && continue
        break
    done
    echo "$secret"
}

set_clipboard() {
    [[ $OSTYPE = darwin* ]] && echo "pbcopy" && return
    [[ $OSTYPE = linux-gnu* ]] && echo "xclip -sel clip" && return
}

select_key() {
    keys=$(find "$vault" -mindepth 1 -exec basename {} \;)
    IFS=$'\n'

    max_key_len=0
    max_i_len=0
    i=1

    for key in $keys; do
        [ "$max_key_len" -lt ${#key} ] && max_key_len=${#key}
        [ "$max_i_len" -lt ${#i} ] && max_i_len=${#i}
        i=$(( i + 1 ))
    done

    term_width=$(tput cols)
    line_len=0
    i=1

    for key in $keys; do
        disp_len=$(( max_key_len + max_i_len + 4 ))
        sum_len=$(( line_len + disp_len ))

        [ "$term_width" -lt $sum_len ] && echo "" && line_len=0
        printf "%${max_i_len}s) %-${max_key_len}s  " "$i" "$key" >&2

        line_len=$(( line_len + disp_len ))
        i=$(( i + 1 ))
    done

    printf "\n\nenter the number of a key: " >&2
    read -r key_num

    [ ! "$key_num" ] && return 1
    [ "$(echo "$key_num" | tr -d "[:digit:]")" ] && return 1
    [ "$key_num" -lt 1 ] && return 1
    [ "$key_num" -ge $i ] && return 1

    echo "$keys" | sed "${key_num}q;d"
}

add_key() {
    [ ! "$2" ] && usage >&2 && exit 1
    [ -e "$vault/$2" ] && echo "a key with that name already exists" >&2 && exit 1

    printf "username: "
    read -r username

    echo "leave empty generate a password"
    printf "password: "
    read -rs password
    echo ""

    [ "$password" ] &&
        echo "confirm password" &&
        printf "password: " &&
        read -rs pass_conf
        echo ""
    [ "$password" != "$pass_conf" ] && echo "passwords did not match" >&2 && exit 1

    [ ! "$password" ] && password="$(gen_password)"

    printf "username: %s\npassword: %s\n" "$username" "$password" |
        gpg --encrypt --armor --default-recipient-self > "$vault/$2"

    echo "done"
}

update_key() {
    sel_key=$(select_key)

    key_text=$(gpg --decrypt "$vault/$sel_key" 2> /dev/null)

    echo "Change (u)sername or (p)assword?"
    read -r update_sel

    [[ $update_sel != [uUpP] ]] && echo "invalid selection" >&2 && exit 1

    if [[ $update_sel = [pP] ]]; then
        clipboard=$(set_clipboard)

        echo "enter your new password (empty generates a new one)"
        printf "password: "
        read -rs new_pass

        [ ! "$new_pass" ] && new_pass=$(gen_password)

        echo "$key_text" | sed "s|^\(password: \).*|\1$new_pass|" |
            gpg --encrypt --armor --default-recipient-self > "$vault/$sel_key"

        echo "$new_pass" | $clipboard
        printf "\nnew password was set and copied to the clipboard\n"
    fi

    if [[ $update_sel = [uU] ]]; then

        echo "enter your new username"
        printf "username: "
        read -r new_user

        echo "$key_text" | sed "s|^\(username: \).*|\1$new_user|" |
            gpg --encrypt --armor --default-recipient-self > "$vault/$sel_key"
    fi

    echo "done"
}

remove_key() {
    sel_key=$(select_key)

    echo "are you sure you want to remove this key (y/N): "
    read -r confirm_del

    [[ $confirm_del = [yY] ]] && rm "$vault/$sel_key"

    echo "done"
}

[ "$1" = "add"    ] && add_key "$@" && exit 0
[ "$1" = "update" ] && update_key   && exit 0
[ "$1" = "remove" ] && remove_key   && exit 0
[ "$1" = "rm"     ] && remove_key   && exit 0
[ "$1" = "-h"     ] && usage        && exit 0
[ "$1" = "--help" ] && usage        && exit 0
[ "$1"            ] && usage >&2    && exit 1

clipboard=$(set_clipboard)
[ ! "$clipboard" ] && echo "couldn't detect clipboard" >&2 && exit 1

sel_key=$(select_key)
[ ! "$sel_key" ] && echo "invalid entry" >&2 && exit 1

key_text=$(gpg --decrypt "$vault/$sel_key" 2> /dev/null)
[ ! "$key_text" ] && echo "decrypt failed" >&2 && exit 1

echo "$key_text" | sed -n "s|^password: \(.*$\)|\1|p" | $clipboard
printf "\npassword was copied to the clipboard\n"

echo "$key_text" | grep --color=never "^username: "
